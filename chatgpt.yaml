openapi: 3.0.0
info:
  title: Secure PhotoManager API
  description: Secure API for managing photo collections
  version: 1.0.0
servers:
  - url: https://api.photomanager.com/v1
    description: Main (production) server
  - url: https://staging.api.photomanager.com/v1
    description: Staging server
tags:
  - name: Photos
    description: Operations related to photos
  - name: Collections
    description: Operations related to photo collections

security:
  - OAuth2: []

paths:
  /photos:
    get:
      tags:
        - Photos
      summary: List all photos
      security:
        - OAuth2: [read:photos]
      responses:
        '200':
          description: A list of photos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - Photos
      summary: Upload a new photo
      security:
        - OAuth2: [write:photos]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                description:
                  type: string
                  maxLength: 255
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /photos/{photoId}:
    get:
      tags:
        - Photos
      summary: Get a specific photo
      security:
        - OAuth2: [read:photos]
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Photo details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Photo not found
    put:
      tags:
        - Photos
      summary: Update a photo
      security:
        - OAuth2: [write:photos]
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  maxLength: 255
      responses:
        '200':
          description: Photo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Photo not found
    delete:
      tags:
        - Photos
      summary: Delete a photo
      security:
        - OAuth2: [delete:photos]
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Photo deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Photo not found

  /collections:
    get:
      tags:
        - Collections
      summary: List all collections
      security:
        - OAuth2: [read:collections]
      responses:
        '200':
          description: A list of collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - Collections
      summary: Create a new collection
      security:
        - OAuth2: [write:collections]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                description:
                  type: string
                  maxLength: 255
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /collections/{collectionId}:
    get:
      tags:
        - Collections
      summary: Get a specific collection
      security:
        - OAuth2: [read:collections]
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
    put:
      tags:
        - Collections
      summary: Update a collection
      security:
        - OAuth2: [write:collections]
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                description:
                  type: string
                  maxLength: 255
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
    delete:
      tags:
        - Collections
      summary: Delete a collection
      security:
        - OAuth2: [delete:collections]
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Collection deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found

components:
  schemas:
    Photo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
        description:
          type: string
          maxLength: 255
        createdAt:
          type: string
          format: date-time

    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 255
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
        createdAt:
          type: string
          format: date-time

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.photomanager.com/oauth2/authorize
          tokenUrl: https://auth.photomanager.com/oauth2/token
          scopes:
            read:photos: read photos
            write:photos: create or update photos
            delete:photos: delete photos
            read:collections: read collections
            write:collections: create or update collections
            delete:collections: delete collections